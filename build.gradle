plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'io.swit'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    /*=============== Server Start ========================*/
    // 톰캣 대신에 UnderTow 사용
    implementation ('org.springframework.boot:spring-boot-starter-web'){
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    //스프링 웹 서비스에서도 톰캣을 제외해야 언더토우가 활성화 된다.
    implementation ('org.springframework.boot:spring-boot-starter-web-services'){
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation('org.springframework.boot:spring-boot-starter-undertow')
    /*=============== Server End ========================*/

    /** Database dependency */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    //QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"


    /** Security */
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //JWT
    implementation 'io.jsonwebtoken:jjwt-api:latest.release'
    implementation 'io.jsonwebtoken:jjwt-impl:latest.release'
    implementation 'io.jsonwebtoken:jjwt-jackson:latest.release'
}

tasks.named('test') {
    useJUnitPlatform()
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory.set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}
